<div id="visualization" class="h-full w-full cursor-pointer"></div>

<script>
  import "q5";

  const SQUARE_SIZE = 25;
  const COLORS = {
    light: {
      background: "--color-background",
      border: "--color-background",
      idleSquare: "--color-primary",
      hoveredSquare: "--color-background",
      accentSquare: "--color-accent",
    },
    dark: {
      background: "--color-background",
      border: "--color-secondary",
      idleSquare: "--color-background",
      hoveredSquare: "--color-secondary",
      accentSquare: "--color-accent",
    },
  };
  const styles = getComputedStyle(document.documentElement);
  const echos: {
    centerPoint: { x: number; y: number };
    strokeWidth: number;
    radius: number;
  }[] = [];

  const visualization = (q: Q5) => {
    let container: HTMLElement;
    let dimensions = { columns: 0, rows: 0, width: 0, height: 0 };

    q.setup = () => {
      container = document.getElementById("visualization")!;
      const { width, height } = container.getBoundingClientRect();
      q.createCanvas(width, height);
      updateDimensions(width, height);
    };

    q.draw = () => {
      const isDarkMode =
        document.documentElement.getAttribute("data-theme") === "dark";
      const colors = COLORS[isDarkMode ? "dark" : "light"];
      q.background(styles.getPropertyValue(colors.background));
      q.stroke(styles.getPropertyValue(colors.border));

      const { mouseX, mouseY } = q;
      const mouseInDefaultPos = mouseX === 0 && mouseY === 0;

      if (mouseInDefaultPos) {
        drawIdleGrid(q, colors, dimensions);
        return;
      }

      updateEchos();
      drawInteractiveGrid(q, colors, dimensions, mouseX, mouseY);
    };

    q.windowResized = () => {
      const { width, height } = container.getBoundingClientRect();
      q.resizeCanvas(width, height);
      updateDimensions(width, height);
    };

    q.mouseClicked = () => {
      const { mouseX, mouseY } = q;
      echos.push({
        centerPoint: { x: mouseX, y: mouseY },
        strokeWidth: 2,
        radius: SQUARE_SIZE * 2,
      });
    };

    function updateDimensions(width: number, height: number) {
      dimensions = {
        width,
        height,
        columns: Math.floor(width / SQUARE_SIZE),
        rows: Math.floor(height / SQUARE_SIZE),
      };
    }

    function updateEchos() {
      echos.forEach((echo, index) => {
        echo.radius += 18;
        if (echo.radius > dimensions.width) {
          echos.splice(index, 1);
        }
      });
    }

    function drawIdleGrid(
      q: Q5,
      colors: typeof COLORS.light | typeof COLORS.dark,
      dimensions: typeof visualization.dimensions,
    ) {
      const color = colors.idleSquare;
      for (let i = 0; i < dimensions.columns; i++) {
        for (let j = 0; j < dimensions.rows; j++) {
          q.fill(styles.getPropertyValue(color));
          q.rect(i * SQUARE_SIZE, j * SQUARE_SIZE, SQUARE_SIZE);
        }
      }
    }

    function drawInteractiveGrid(
      q: Q5,
      colors: typeof COLORS.light | typeof COLORS.dark,
      dimensions: typeof visualization.dimensions,
      mouseX: number,
      mouseY: number,
    ) {
      for (let i = 0; i < dimensions.columns; i++) {
        for (let j = 0; j < dimensions.rows; j++) {
          const squareCenter = {
            x: i * SQUARE_SIZE + SQUARE_SIZE / 2,
            y: j * SQUARE_SIZE + SQUARE_SIZE / 2,
          };

          const distanceToMouse = q.dist(
            squareCenter.x,
            squareCenter.y,
            mouseX,
            mouseY,
          );

          const color = getSquareColor(colors, distanceToMouse, squareCenter);
          q.fill(styles.getPropertyValue(color));
          q.rect(i * SQUARE_SIZE, j * SQUARE_SIZE, SQUARE_SIZE);
        }
      }
    }

    function getSquareColor(
      colors: typeof COLORS.light | typeof COLORS.dark,
      distanceToMouse: number,
      squareCenter: { x: number; y: number },
    ): string {
      if (distanceToMouse < 60) {
        return colors.hoveredSquare;
      } else if (distanceToMouse < 65) {
        return colors.accentSquare;
      } else {
        return isInEchoRadius(squareCenter)
          ? colors.hoveredSquare
          : colors.idleSquare;
      }
    }

    function isInEchoRadius(squareCenter: { x: number; y: number }): boolean {
      return echos.some((echo) => {
        const { centerPoint, strokeWidth, radius } = echo;
        const distanceToEcho = q.dist(
          squareCenter.x,
          squareCenter.y,
          centerPoint.x,
          centerPoint.y,
        );
        return (
          distanceToEcho > radius &&
          distanceToEcho < radius + strokeWidth * SQUARE_SIZE
        );
      });
    }
  };

  new Q5(visualization, document.getElementById("visualization")!);

  declare class Q5 {
    mouseX: number;
    mouseY: number;

    constructor(sketch: (q: Q5) => void, element?: HTMLElement);
    createCanvas(width: number, height: number): void;
    background(color: string): void;
    stroke(color: string): void;
    fill(color: string): void;
    rect(x: number, y: number, size: number): void;
    dist(x1: number, y1: number, x2: number, y2: number): number;
    resizeCanvas(width: number, height: number): void;
    windowResized(): void;
    setup(): void;
    draw(): void;
    mouseClicked(): void;
  }
</script>
