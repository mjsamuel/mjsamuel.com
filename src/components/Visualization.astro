<div id="visualization" class="h-full w-full cursor-none"></div>

<script>
  import "q5";

  const SQUARE_SIZE = 25;
  const COLORS = {
    light: {
      border: "--color-background",
      idleSquare: "--color-primary",
      hoveredSquare: "--color-background",
      accentSquare: "--color-accent",
    },
    dark: {
      border: "--color-secondary",
      idleSquare: "--color-background",
      hoveredSquare: "--color-secondary",
      accentSquare: "--color-accent",
    },
  };
  const styles = getComputedStyle(document.documentElement);

  const visualization = (q: Q5) => {
    let container: HTMLElement;
    let dimensions = { columns: 0, rows: 0, width: 0, height: 0 };

    q.setup = () => {
      container = document.getElementById("visualization")!;
      const { width, height } = container.getBoundingClientRect();
      q.createCanvas(width, height);
      _updateDimensions(width, height);
    };

    q.draw = () => {
      const isDarkMode =
        document.documentElement.getAttribute("data-theme") === "dark";
      const colors = COLORS[isDarkMode ? "dark" : "light"];

      const { mouseX, mouseY } = q;
      q.background(styles.getPropertyValue(colors.idleSquare));
      q.stroke(styles.getPropertyValue(colors.border));
      for (let i = 0; i < dimensions.columns; i++) {
        for (let j = 0; j < dimensions.rows; j++) {
          const mouseInDefaultPos = mouseX === 0 && mouseY === 0;
          const distanceToMouse = q.dist(
            i * SQUARE_SIZE + SQUARE_SIZE / 2,
            j * SQUARE_SIZE + SQUARE_SIZE / 2,
            mouseX,
            mouseY,
          );

          let color: string;
          switch (true) {
            case mouseInDefaultPos:
              color = colors.idleSquare;
              break;
            case distanceToMouse < 60:
              color = colors.hoveredSquare;
              break;
            case distanceToMouse < 65:
              color = colors.accentSquare;
              break;
            default:
              color = colors.idleSquare;
          }

          q.fill(styles.getPropertyValue(color));
          q.rect(i * SQUARE_SIZE, j * SQUARE_SIZE, SQUARE_SIZE);
        }
      }
    };

    q.windowResized = () => {
      const { width, height } = container.getBoundingClientRect();
      q.resizeCanvas(width, height);
      _updateDimensions(width, height);
    };

    function _updateDimensions(width: number, height: number) {
      dimensions = {
        width,
        height,
        columns: Math.floor(width / SQUARE_SIZE),
        rows: Math.floor(height / SQUARE_SIZE),
      };
    }
  };

  new Q5(visualization, document.getElementById("visualization")!);
</script>
